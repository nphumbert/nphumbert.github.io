<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Refactoring on Nadia Z. Humbert-Labeaumaz</title><link>https://nadiahl.com/tags/refactoring/</link><description>Recent content in Refactoring on Nadia Z. Humbert-Labeaumaz</description><generator>Hugo</generator><language>en-US</language><copyright>© 2025 Nadia Z. Humbert-Labeaumaz</copyright><lastBuildDate>Thu, 20 Jul 2017 15:32:15 +0100</lastBuildDate><atom:link href="https://nadiahl.com/tags/refactoring/index.xml" rel="self" type="application/rss+xml"/><item><title>Refactoring Conditional Structures with Map</title><link>https://nadiahl.com/blog/2017/07/20/refactoring-conditional-with-map/</link><pubDate>Thu, 20 Jul 2017 15:32:15 +0100</pubDate><guid>https://nadiahl.com/blog/2017/07/20/refactoring-conditional-with-map/</guid><description>&lt;p&gt;I often come across code snippets like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Day&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;public&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;start&lt;/span&gt;(Weather weather) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;switch&lt;/span&gt;(weather) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;case&lt;/span&gt; RAINY:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; takeAnUmbrella();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;case&lt;/span&gt; SUNNY:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; takeAHat();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;case&lt;/span&gt; STORMY:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; stayHome();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;default&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; doNothing();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here, a specific action depends on the weather. This kind of code is both difficult to test and maintain. In this short article, I&amp;rsquo;ll show how to refactor it using a &lt;code&gt;Map&lt;/code&gt;.&lt;/p&gt;</description></item><item><title>Refactoring d'une application N-Tiers en utilisant le CQRS</title><link>https://nadiahl.com/blog/2016/06/26/refactoring-architecture-n-tiers-cqrs/</link><pubDate>Sun, 26 Jun 2016 18:14:40 +0200</pubDate><guid>https://nadiahl.com/blog/2016/06/26/refactoring-architecture-n-tiers-cqrs/</guid><description>&lt;p&gt;CQRS, ou &lt;em&gt;Command Query Responsibility Segregation&lt;/em&gt;, est une architecture où la partie &lt;em&gt;Command&lt;/em&gt; (écriture) et la partie &lt;em&gt;Query&lt;/em&gt; (lecture) du système sont séparées.&lt;/p&gt;
&lt;p&gt;J&amp;rsquo;ai eu la chance d&amp;rsquo;assister récemment à une présentation de &lt;a href="https://twitter.com/tjaskula"&gt;Tomasz Jaskula&lt;/a&gt; nommée &lt;a href="https://www.youtube.com/watch?v=5Sx_xO-eCE8"&gt;Recettes CQRS, pour bien cuisiner son architecture&lt;/a&gt;. Je l&amp;rsquo;ai beaucoup appréciée, notamment car on voit les différentes étapes pour arriver à une architecture CQRS / Event Sourcing / DDD à partir d&amp;rsquo;une architecture N-Tiers &amp;ldquo;classique&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;L&amp;rsquo;objectif de cet article est de présenter ma compréhension et mon avis sur le CQRS en particulier.&lt;/p&gt;</description></item><item><title>Polymorphisme avec le kata parrot refactoring</title><link>https://nadiahl.com/blog/2016/04/20/polymorphisme-avec-le-kata-parrot-refactoring/</link><pubDate>Wed, 20 Apr 2016 16:26:03 +0200</pubDate><guid>https://nadiahl.com/blog/2016/04/20/polymorphisme-avec-le-kata-parrot-refactoring/</guid><description>&lt;p&gt;Ce kata est tiré d&amp;rsquo;un exemple du livre &amp;ldquo;Refactoring, Improving the Design of Existing Code&amp;rdquo; de Martin Fowler, et a été créé par Emilie Bache.
L&amp;rsquo;exemple contient des signes de mauvais design et permet notamment de pratiquer le polymorphisme.&lt;br&gt;
Dans cet article, une solution à ce kata sera développée. Le projet qui a servi de support se trouve sur &lt;a href="https://github.com/nphumbert/kata-parrot-refactoring"&gt;GitHub&lt;/a&gt; avec la solution respective.&lt;/p&gt;</description></item><item><title>Refactoring Is Like Sleeping</title><link>https://nadiahl.com/blog/2016/03/10/refactoring-is-like-sleeping/</link><pubDate>Thu, 10 Mar 2016 15:12:42 +0100</pubDate><guid>https://nadiahl.com/blog/2016/03/10/refactoring-is-like-sleeping/</guid><description>&lt;p&gt;Bob is a developer. He has been asked to add a brand new feature to the application. He&amp;rsquo;d like to take this opportunity to refactor the code a little bit, since it doesn&amp;rsquo;t respect the good practices he learned from the last Software Craftsmanship meetup. However, Bob was told he couldn&amp;rsquo;t do it because there was not enough time to do anything other than produce features. So, Bob thought, &amp;ldquo;there is never enough time anyway&amp;rdquo;&amp;hellip;&lt;/p&gt;
&lt;p&gt;Sounds familiar? Indeed, refactoring is often seen as an activity without any value. Other things in life can also seem pointless. There is one that takes almost a third of our lives during which we literally do nothing: &lt;em&gt;sleeping&lt;/em&gt;!&lt;/p&gt;</description></item></channel></rss>