<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Software Testing on Nadia Humbert-Labeaumaz</title><link>https://nphumbert.github.io/tags/software-testing/</link><description>Recent content in Software Testing on Nadia Humbert-Labeaumaz</description><generator>Hugo</generator><language>en-US</language><copyright>© 2024 Nadia Humbert-Labeaumaz</copyright><lastBuildDate>Sun, 17 Sep 2017 16:09:24 +0200</lastBuildDate><atom:link href="https://nphumbert.github.io/tags/software-testing/index.xml" rel="self" type="application/rss+xml"/><item><title>Testing Java Spring Boot Microservices</title><link>https://nphumbert.github.io/blog/2017/09/17/testing-java-spring-cloud-microservices/</link><pubDate>Sun, 17 Sep 2017 16:09:24 +0200</pubDate><guid>https://nphumbert.github.io/blog/2017/09/17/testing-java-spring-cloud-microservices/</guid><description>&lt;p>Tests are an essential part of our codebase. At the very least, they minimize the risk of regression when we modify our code. There are several types of tests, and each has a specific role: unit tests, integration tests, component tests, contract tests and end-to-end tests. Therefore, it is crucial to understand the role of each type of test to leverage its potential.&lt;/p>
&lt;p>This article describes a strategy to use them to test Java Spring Boot microservices. It presents each type of test&amp;rsquo;s role, scope, and tooling.&lt;/p></description></item><item><title>How to Write Robust Component Tests</title><link>https://nphumbert.github.io/blog/2017/09/16/how-to-write-robust-component-tests/</link><pubDate>Sat, 16 Sep 2017 13:37:12 +0200</pubDate><guid>https://nphumbert.github.io/blog/2017/09/16/how-to-write-robust-component-tests/</guid><description>&lt;p>Component tests allow testing complete use cases from end to end. However, they are often expensive, especially in terms of setup and execution time. Thus, thought needs to be given to defining their scope. Nevertheless, they are required to check and document the overall behaviour of the application or the microservice.&lt;/p>
&lt;p>I have noticed that, in the context of microservices, these tests are cost-effective. Indeed, they can be easy to set up as it is often possible to use the already existing external API of the microservice without needing additional elements (like a fake server, for instance). Moreover, the scope of a microservice is generally limited and can be tested exhaustively in isolation.&lt;/p>
&lt;p>This article aims to show how to make these tests robust. The main idea is to make them independent of the implementation.&lt;/p></description></item><item><title>Ecrire des tests avec Spring Boot 1.4</title><link>https://nphumbert.github.io/blog/2016/08/08/ecrire-des-tests-avec-spring-boot-1-dot-4/</link><pubDate>Mon, 08 Aug 2016 07:11:29 +0200</pubDate><guid>https://nphumbert.github.io/blog/2016/08/08/ecrire-des-tests-avec-spring-boot-1-dot-4/</guid><description>&lt;p>La version 1.4 de Spring Boot est sortie le 28 juillet 2016. Elle contient notamment des évolutions importantes au niveau de l&amp;rsquo;écriture des tests.&lt;br>
L&amp;rsquo;objectif de cet article est de voir comment migrer les tests d&amp;rsquo;un &lt;em>controller&lt;/em> Spring MVC en utilisant les nouvelles fonctionnalités apportées par cette version.&lt;/p></description></item><item><title>ATDD et TDD double boucle</title><link>https://nphumbert.github.io/blog/2016/05/22/atdd-et-tdd-double-boucle/</link><pubDate>Sun, 22 May 2016 22:27:01 +0200</pubDate><guid>https://nphumbert.github.io/blog/2016/05/22/atdd-et-tdd-double-boucle/</guid><description>&lt;p>L&amp;rsquo;&lt;em>Acceptance Test Driven Development&lt;/em> est une pratique qui consiste à écrire un test d&amp;rsquo;acceptation dès la définition de la fonctionnalité à implémenter. Ce test permet ensuite de valider que l&amp;rsquo;implémentation de la fonctionnalité est terminée. En général, plusieurs composants unitaires sont nécessaires pour implémenter une fonctionnalité. Ces composants peuvent être développés en TDD dans une deuxième boucle de &lt;em>feedback&lt;/em>.&lt;/p>
&lt;p>L&amp;rsquo;objectif de cet article est de présenter l&amp;rsquo;ATDD et comment le mettre en pratique grâce à du TDD double boucle.&lt;/p></description></item><item><title>Once upon a time TDD... and me</title><link>https://nphumbert.github.io/blog/2016/04/13/once-upon-a-time-tdd-and-me/</link><pubDate>Wed, 13 Apr 2016 23:56:11 +0200</pubDate><guid>https://nphumbert.github.io/blog/2016/04/13/once-upon-a-time-tdd-and-me/</guid><description>&lt;p>Once upon a time, a young woman had plenty of projects and passions and was a bit hyperactive. She doesn&amp;rsquo;t really enjoy talking about her life and asks herself, very seriously, how she will write this post.&lt;/p>
&lt;p>Among her early age dreams were learning many things about science and software engineering. She started with biosciences (by the way, they are fascinating, nothing is more complex and well crafted than the human body) and then she decided to continue with software engineering. However, the software engineering program she completed only lasted one year (6 months of classes and 6 months of internship). Of course, this was only a door to access the world that she wanted to discover so much.&lt;/p></description></item><item><title>Que faire lorsqu'une méthode privée veut être testée ?</title><link>https://nphumbert.github.io/blog/2016/02/21/que-faire-lorsqu-une-methode-privee-veut-etre-testee/</link><pubDate>Sun, 21 Feb 2016 11:09:38 +0100</pubDate><guid>https://nphumbert.github.io/blog/2016/02/21/que-faire-lorsqu-une-methode-privee-veut-etre-testee/</guid><description>&lt;p>Les tests automatisés servent à vérifier le bon comportement d&amp;rsquo;un objet (ou d&amp;rsquo;un ensemble d&amp;rsquo;objets), indépendamment de la manière dont ce comportement est implémenté. Le comportement d&amp;rsquo;un objet est décrit par son API publique (constructeurs, constantes et méthodes publiques). Les tests ne devraient donc utiliser que cette API.&lt;/p>
&lt;p>Les méthodes privées (et &lt;em>protected&lt;/em>) ne faisant pas partie de l&amp;rsquo;API publique d&amp;rsquo;un objet, elles ne devraient pas être appelées directement par le code de test.&lt;/p>
&lt;p>Cet article a pour objectif de montrer comment réagir lorsqu&amp;rsquo;il paraît nécessaire de tester une méthode privée.&lt;/p></description></item><item><title>Testing Spring MVC Controllers</title><link>https://nphumbert.github.io/blog/2015/10/31/testing-spring-mvc-controllers/</link><pubDate>Sat, 31 Oct 2015 12:54:08 +0100</pubDate><guid>https://nphumbert.github.io/blog/2015/10/31/testing-spring-mvc-controllers/</guid><description>&lt;p>Since Spring 3.2 (January 2013), it has been possible to test Spring MVC controllers without an external framework.
This article aims to show how to test Spring MVC controllers using only Spring testing capabilities.&lt;/p></description></item></channel></rss>