<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Software Testing on Nadia Humbert-Labeaumaz</title><link>https://nadiahl.com/tags/software-testing/</link><description>Recent content in Software Testing on Nadia Humbert-Labeaumaz</description><generator>Hugo</generator><language>en-US</language><copyright>© 2025 Nadia Humbert-Labeaumaz</copyright><lastBuildDate>Sun, 17 Sep 2017 16:09:24 +0200</lastBuildDate><atom:link href="https://nadiahl.com/tags/software-testing/index.xml" rel="self" type="application/rss+xml"/><item><title>Testing Java Spring Boot Microservices</title><link>https://nadiahl.com/blog/2017/09/17/testing-java-spring-cloud-microservices/</link><pubDate>Sun, 17 Sep 2017 16:09:24 +0200</pubDate><guid>https://nadiahl.com/blog/2017/09/17/testing-java-spring-cloud-microservices/</guid><description>&lt;p&gt;Tests are an essential part of any codebase.
At a minimum, they help prevent regressions as the code evolves. But not all tests are created equal: unit, integration, component, contract, and end-to-end tests each serve a distinct purpose.&lt;/p&gt;
&lt;p&gt;This article outlines a practical testing strategy for Java Spring Boot microservices, covering the role, scope, and tooling for each test type to help you get the most value from your test suite.&lt;/p&gt;</description></item><item><title>How to Write Robust Component Tests</title><link>https://nadiahl.com/blog/2017/09/16/how-to-write-robust-component-tests/</link><pubDate>Sat, 16 Sep 2017 13:37:12 +0200</pubDate><guid>https://nadiahl.com/blog/2017/09/16/how-to-write-robust-component-tests/</guid><description>&lt;p&gt;Component tests check full use cases from start to finish. They’re essential for verifying and documenting how an application or service behaves overall. But they can be expensive, especially in terms of setup and execution time, which is why it’s important to define their scope carefully.&lt;/p&gt;
&lt;p&gt;That said, I’ve often found them cost-effective in distributed architectures. They’re usually simple to set up, since you can reuse the service’s external API without needing extras like fake servers. And since each microservice tends to have a narrow focus, you can test its behavior thoroughly in isolation.&lt;/p&gt;
&lt;p&gt;This article explores how to make component tests more robust, with one key idea: keep them independent of implementation details.&lt;/p&gt;</description></item><item><title>Ecrire des tests avec Spring Boot 1.4</title><link>https://nadiahl.com/blog/2016/08/08/ecrire-des-tests-avec-spring-boot-1-dot-4/</link><pubDate>Mon, 08 Aug 2016 07:11:29 +0200</pubDate><guid>https://nadiahl.com/blog/2016/08/08/ecrire-des-tests-avec-spring-boot-1-dot-4/</guid><description>&lt;p&gt;La version 1.4 de Spring Boot est sortie le 28 juillet 2016. Elle contient notamment des évolutions importantes au niveau de l&amp;rsquo;écriture des tests.&lt;br&gt;
L&amp;rsquo;objectif de cet article est de voir comment migrer les tests d&amp;rsquo;un &lt;em&gt;controller&lt;/em&gt; Spring MVC en utilisant les nouvelles fonctionnalités apportées par cette version.&lt;/p&gt;</description></item><item><title>ATDD et TDD double boucle</title><link>https://nadiahl.com/blog/2016/05/22/atdd-et-tdd-double-boucle/</link><pubDate>Sun, 22 May 2016 22:27:01 +0200</pubDate><guid>https://nadiahl.com/blog/2016/05/22/atdd-et-tdd-double-boucle/</guid><description>&lt;p&gt;L&amp;rsquo;&lt;em&gt;Acceptance Test Driven Development&lt;/em&gt; est une pratique qui consiste à écrire un test d&amp;rsquo;acceptation dès la définition de la fonctionnalité à implémenter. Ce test permet ensuite de valider que l&amp;rsquo;implémentation de la fonctionnalité est terminée. En général, plusieurs composants unitaires sont nécessaires pour implémenter une fonctionnalité. Ces composants peuvent être développés en TDD dans une deuxième boucle de &lt;em&gt;feedback&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;L&amp;rsquo;objectif de cet article est de présenter l&amp;rsquo;ATDD et comment le mettre en pratique grâce à du TDD double boucle.&lt;/p&gt;</description></item><item><title>Once upon a time TDD... and me</title><link>https://nadiahl.com/blog/2016/04/13/once-upon-a-time-tdd-and-me/</link><pubDate>Wed, 13 Apr 2016 23:56:11 +0200</pubDate><guid>https://nadiahl.com/blog/2016/04/13/once-upon-a-time-tdd-and-me/</guid><description>&lt;p&gt;Once upon a time, a young woman had plenty of projects and passions and was a bit hyperactive. She didn&amp;rsquo;t enjoy talking about her life and wondered how she would write this post.&lt;/p&gt;
&lt;p&gt;Among her early dreams were learning many things about science and software engineering. She started with biosciences (which, by the way, are fascinating — nothing is more complex and well-crafted than the human body) and then decided to continue with software engineering. However, the software engineering program she completed only lasted one year (6 months of classes and 6 months of internship). Of course, this was simply a doorway to the world she was eager to discover.&lt;/p&gt;</description></item><item><title>Que faire lorsqu'une méthode privée veut être testée ?</title><link>https://nadiahl.com/blog/2016/02/21/que-faire-lorsqu-une-methode-privee-veut-etre-testee/</link><pubDate>Sun, 21 Feb 2016 11:09:38 +0100</pubDate><guid>https://nadiahl.com/blog/2016/02/21/que-faire-lorsqu-une-methode-privee-veut-etre-testee/</guid><description>&lt;p&gt;Les tests automatisés servent à vérifier le bon comportement d&amp;rsquo;un objet (ou d&amp;rsquo;un ensemble d&amp;rsquo;objets), indépendamment de la manière dont ce comportement est implémenté. Le comportement d&amp;rsquo;un objet est décrit par son API publique (constructeurs, constantes et méthodes publiques). Les tests ne devraient donc utiliser que cette API.&lt;/p&gt;
&lt;p&gt;Les méthodes privées (et &lt;em&gt;protected&lt;/em&gt;) ne faisant pas partie de l&amp;rsquo;API publique d&amp;rsquo;un objet, elles ne devraient pas être appelées directement par le code de test.&lt;/p&gt;
&lt;p&gt;Cet article a pour objectif de montrer comment réagir lorsqu&amp;rsquo;il paraît nécessaire de tester une méthode privée.&lt;/p&gt;</description></item><item><title>Testing Spring MVC Controllers</title><link>https://nadiahl.com/blog/2015/10/31/testing-spring-mvc-controllers/</link><pubDate>Sat, 31 Oct 2015 12:54:08 +0100</pubDate><guid>https://nadiahl.com/blog/2015/10/31/testing-spring-mvc-controllers/</guid><description>&lt;p&gt;Since Spring 3.2 (January 2013), it has become possible to test Spring MVC controllers without an external framework.
This article demonstrates how to test Spring MVC controllers using only Spring&amp;rsquo;s built-in testing capabilities.&lt;/p&gt;</description></item></channel></rss>