<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java on Nadia Humbert-Labeaumaz</title><link>https://nphumbert.github.io/tags/java/</link><description>Recent content in Java on Nadia Humbert-Labeaumaz</description><generator>Hugo</generator><language>en-US</language><copyright>© 2024 Nadia Humbert-Labeaumaz</copyright><lastBuildDate>Sun, 17 Sep 2017 16:09:24 +0200</lastBuildDate><atom:link href="https://nphumbert.github.io/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>Testing Java Spring Boot Microservices</title><link>https://nphumbert.github.io/blog/2017/09/17/testing-java-spring-cloud-microservices/</link><pubDate>Sun, 17 Sep 2017 16:09:24 +0200</pubDate><guid>https://nphumbert.github.io/blog/2017/09/17/testing-java-spring-cloud-microservices/</guid><description>&lt;p>Tests are an essential part of our codebase. At the very least, they minimize the risk of regression when we modify our code. There are several types of tests, and each has a specific role: unit tests, integration tests, component tests, contract tests and end-to-end tests. Therefore, it is crucial to understand the role of each type of test to leverage its potential.&lt;/p>
&lt;p>This article describes a strategy to use them to test Java Spring Boot microservices. It presents each type of test&amp;rsquo;s role, scope, and tooling.&lt;/p></description></item><item><title>Setup a Circuit Breaker with Hystrix, Feign Client and Spring Boot</title><link>https://nphumbert.github.io/blog/2017/07/23/setup-a-circuit-breaker-with-hystrix/</link><pubDate>Sun, 23 Jul 2017 13:33:38 +0200</pubDate><guid>https://nphumbert.github.io/blog/2017/07/23/setup-a-circuit-breaker-with-hystrix/</guid><description>&lt;p>In a microservices architecture, several things could go wrong. For example, a middleware, the network or the service you want to contact could be down. In this world of uncertainty, you have to anticipate problems to avoid breaking the entire chain and throwing an error to the end-user when you could offer a partially degraded service instead.&lt;/p>
&lt;p>This article aims to show how to implement the circuit breaker pattern using Hystrix, Feign Client and Spring Boot.&lt;/p></description></item><item><title>Refactoring Conditional Structures with Map</title><link>https://nphumbert.github.io/blog/2017/07/20/refactoring-conditional-with-map/</link><pubDate>Thu, 20 Jul 2017 15:32:15 +0100</pubDate><guid>https://nphumbert.github.io/blog/2017/07/20/refactoring-conditional-with-map/</guid><description>&lt;p>I often encounter pieces of code that look like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Day&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">start&lt;/span>(Weather weather) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">switch&lt;/span>(weather) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> RAINY:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> takeAnUmbrella();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> SUNNY:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> takeAHat();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> STORMY:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stayHome();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">default&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> doNothing();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here, a specific action must be taken depending on the weather. This kind of code is pretty hard to test and maintain. This short article aims to refactor it using a &lt;code>Map&lt;/code>.&lt;/p></description></item><item><title>Gérer les dépendances circulaires</title><link>https://nphumbert.github.io/blog/2016/12/17/gerer-les-dependances-circulaires/</link><pubDate>Sat, 17 Dec 2016 18:31:18 +0100</pubDate><guid>https://nphumbert.github.io/blog/2016/12/17/gerer-les-dependances-circulaires/</guid><description>&lt;p>Durant mon travail, j&amp;rsquo;ai rencontré des dépendances circulaires dans une application sur laquelle je suis intervenue. Dans sa plus simple forme, il s&amp;rsquo;agit de deux classes qui dépendent l&amp;rsquo;une de l&amp;rsquo;autre.
Ceci est, selon moi, un problème pour plusieurs raisons. L&amp;rsquo;objectif de cet article est de montrer ce qu&amp;rsquo;est une dépendance circulaire, en quoi cela peut poser problème, et comment les éliminer.&lt;/p></description></item><item><title>Ecrire des tests avec Spring Boot 1.4</title><link>https://nphumbert.github.io/blog/2016/08/08/ecrire-des-tests-avec-spring-boot-1-dot-4/</link><pubDate>Mon, 08 Aug 2016 07:11:29 +0200</pubDate><guid>https://nphumbert.github.io/blog/2016/08/08/ecrire-des-tests-avec-spring-boot-1-dot-4/</guid><description>&lt;p>La version 1.4 de Spring Boot est sortie le 28 juillet 2016. Elle contient notamment des évolutions importantes au niveau de l&amp;rsquo;écriture des tests.&lt;br>
L&amp;rsquo;objectif de cet article est de voir comment migrer les tests d&amp;rsquo;un &lt;em>controller&lt;/em> Spring MVC en utilisant les nouvelles fonctionnalités apportées par cette version.&lt;/p></description></item><item><title>Pourquoi ne pas utiliser l'héritage pour éviter la duplication de code ?</title><link>https://nphumbert.github.io/blog/2016/01/24/heritage-duplication-code/</link><pubDate>Sun, 24 Jan 2016 11:38:41 +0100</pubDate><guid>https://nphumbert.github.io/blog/2016/01/24/heritage-duplication-code/</guid><description>&lt;p>L&amp;rsquo;héritage est une composante très importante des langages orientés objet tels que Java. Cependant, il doit être utilisé à bon escient afin de respecter les bonnes pratiques de programmation.&lt;/p>
&lt;p>Il m&amp;rsquo;est arrivé de rencontrer des cas où l&amp;rsquo;héritage était utilisé afin de ne pas dupliquer du code. Le but de cet article est d&amp;rsquo;illustrer une telle utilisation, d&amp;rsquo;analyser ses inconvénients et de montrer une manière possible de la corriger.&lt;/p></description></item><item><title>Testing Spring MVC Controllers</title><link>https://nphumbert.github.io/blog/2015/10/31/testing-spring-mvc-controllers/</link><pubDate>Sat, 31 Oct 2015 12:54:08 +0100</pubDate><guid>https://nphumbert.github.io/blog/2015/10/31/testing-spring-mvc-controllers/</guid><description>&lt;p>Since Spring 3.2 (January 2013), it has been possible to test Spring MVC controllers without an external framework.
This article aims to show how to test Spring MVC controllers using only Spring testing capabilities.&lt;/p></description></item><item><title>Exposer des ressources statiques avec Spring MVC</title><link>https://nphumbert.github.io/blog/2015/09/18/exposer-des-ressources-statiques-avec-spring-mvc/</link><pubDate>Fri, 18 Sep 2015 12:59:06 +0100</pubDate><guid>https://nphumbert.github.io/blog/2015/09/18/exposer-des-ressources-statiques-avec-spring-mvc/</guid><description>&lt;p>Il est souvent nécessaire d&amp;rsquo;exposer des ressources statiques telles que des images, des fichiers pdf, des vidéos, etc. dans une application web.
Ces fichiers sont stockés sur le serveur et ne sont donc pas accessibles à l&amp;rsquo;utilisateur via une URL.&lt;/p>
&lt;p>L&amp;rsquo;objectif de cet article est d&amp;rsquo;exposer des fichiers stockés sur le serveur via une URL dans une application Spring MVC.&lt;/p></description></item><item><title>Transférer des paramètres à travers un redirect avec Spring MVC</title><link>https://nphumbert.github.io/blog/2015/07/25/transferer-des-parametres-a-travers-un-redirect-avec-spring-mvc/</link><pubDate>Sat, 25 Jul 2015 12:06:04 +0200</pubDate><guid>https://nphumbert.github.io/blog/2015/07/25/transferer-des-parametres-a-travers-un-redirect-avec-spring-mvc/</guid><description>&lt;p>Dans une application web, il est courant d&amp;rsquo;effectuer une redirection après la soumission d&amp;rsquo;un formulaire. Cette redirection permet notamment de rendre l&amp;rsquo;url &lt;em>bookmarkable&lt;/em> et d&amp;rsquo;empêcher l&amp;rsquo;utilisateur de resoumettre le formulaire par erreur (suite à un &lt;em>refresh&lt;/em>, par exemple).&lt;/p>
&lt;p>Il peut être intéressant de passer des paramètres à travers ce redirect. Par exemple, pour indiquer à l&amp;rsquo;utilisateur que son formulaire a bien été soumis. Pour ce faire, il est possible d&amp;rsquo;ajouter des paramètres directement dans l&amp;rsquo;url : &lt;code>redirect:/path/to/endpoint?formSubmitted=true&lt;/code>.
Cette solution n&amp;rsquo;est pas toujours adpatée pour des raisons de confidentialité, de taille d&amp;rsquo;url ou simplement d&amp;rsquo;esthétique.&lt;/p>
&lt;p>L&amp;rsquo;objectif de cet article est de démontrer comment transférer des paramètres à travers une redirection avec Spring MVC en utilisant des &lt;em>flash attributes&lt;/em>. L&amp;rsquo;exemple utilisé consistera en un formulaire qui permet d&amp;rsquo;envoyer un nom. Ce nom s&amp;rsquo;affichera ensuite une fois le formulaire soumis.&lt;/p></description></item><item><title>Spring Security et Spring Boot</title><link>https://nphumbert.github.io/blog/2015/06/21/spring-security-et-spring-boot/</link><pubDate>Sun, 21 Jun 2015 11:51:37 +0200</pubDate><guid>https://nphumbert.github.io/blog/2015/06/21/spring-security-et-spring-boot/</guid><description>&lt;p>Depuis Spring 3.1, il est possible de configurer Spring en Java.
La configuration Java de Spring Security est supportée depuis sa version 3.2 (&lt;a href="http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#jc">source&lt;/a>).&lt;/p>
&lt;p>L&amp;rsquo;objectif de cet article est de montrer comment configurer Spring Security en Java config, dans une application Spring Boot, avec une base de données qui contient les utilisateurs et leur mot de passe hashé. De plus, une authentification HTTP basic sera mise en place.&lt;/p></description></item><item><title>Injections de dépendances avec Spring</title><link>https://nphumbert.github.io/blog/2015/06/14/injections-de-dependances-avec-spring/</link><pubDate>Sun, 14 Jun 2015 08:35:20 +0200</pubDate><guid>https://nphumbert.github.io/blog/2015/06/14/injections-de-dependances-avec-spring/</guid><description>&lt;p>Il existe plusieurs méthodes pour injecter une dépendance dans un objet Java :&lt;/p>
&lt;ul>
&lt;li>Injection sur un setter&lt;/li>
&lt;li>Injection sur le constructeur&lt;/li>
&lt;li>Injection directe sur la déclaration de l&amp;rsquo;attribut&lt;/li>
&lt;/ul>
&lt;p>Cet article a pour objectif de définir ces différentes méthodes, de décrire leurs avantages et inconvénients et indiquer leurs cas d&amp;rsquo;utilisation.&lt;/p></description></item></channel></rss>