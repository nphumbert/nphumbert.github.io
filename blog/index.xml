<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Latest Posts on Nadia Humbert-Labeaumaz</title><link>https://nphumbert.github.io/blog/</link><description>Recent content in Latest Posts on Nadia Humbert-Labeaumaz</description><generator>Hugo</generator><language>en-US</language><copyright>© 2024 Nadia Humbert-Labeaumaz</copyright><lastBuildDate>Wed, 28 Apr 2021 19:48:00 +0600</lastBuildDate><atom:link href="https://nphumbert.github.io/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>How to Effect Long-Lasting Organisational Changes</title><link>https://nphumbert.github.io/blog/2021/04/28/effecting-long-lasting-changes/</link><pubDate>Wed, 28 Apr 2021 19:48:00 +0600</pubDate><guid>https://nphumbert.github.io/blog/2021/04/28/effecting-long-lasting-changes/</guid><description>&lt;p>Change is hard.&lt;/p>
&lt;p>However, sometimes, we cannot avoid it. This state of fact applies to our personal lives, as well as at the organisational level. For instance, companies that did not even consider remote working as an option less than two years ago must let us work from home now.&lt;/p>
&lt;p>Changes will happen whether we want them or not. But what can make these changes successful in the long run?&lt;/p></description></item><item><title>What is a Social Entrepreneur?</title><link>https://nphumbert.github.io/blog/2021/01/14/what-is-a-social-entrepreneur/</link><pubDate>Thu, 14 Jan 2021 19:03:24 +0200</pubDate><guid>https://nphumbert.github.io/blog/2021/01/14/what-is-a-social-entrepreneur/</guid><description>&lt;p>Nowadays, several definitions of social entrepreneurship coexist.
I think this ambiguity might sometimes dilute social entrepreneurs&amp;rsquo; image, reduce their credibility vis-a-vis other entrepreneurs, weaken the relevance of the insights they receive and, ultimately, harm their purpose. Therefore, having a shared understanding of what social entrepreneurship means seems essential.&lt;/p>
&lt;p>This article will cover my definition of a social enterprise and share insights regarding social entrepreneurs inferred from primary research performed in a small random sample in Toronto, Canada.&lt;/p></description></item><item><title>Debt and SMEs in New Zealand</title><link>https://nphumbert.github.io/blog/2020/07/05/debt-sme-nz/</link><pubDate>Sun, 05 Jul 2020 00:00:00 +0200</pubDate><guid>https://nphumbert.github.io/blog/2020/07/05/debt-sme-nz/</guid><description>&lt;p>In this video, I will be talking about debt funding for small to medium businesses in NZ.
Currently, we see how the media often underlines the low cost of money. While this might be true for individuals, especially for mortgages, the reality of SMEs is completely different. My goal will be to provide insights into the implications of the existing lending conditions for SMEs and some ideas for recommendations on improving the situation.&lt;/p></description></item><item><title>The Cloudy Relationship Between France and Diesel</title><link>https://nphumbert.github.io/blog/2019/06/27/cloudy-relationship-france-diesel/</link><pubDate>Thu, 27 Jun 2019 19:03:24 +0200</pubDate><guid>https://nphumbert.github.io/blog/2019/06/27/cloudy-relationship-france-diesel/</guid><description>&lt;p>After WWII, Charles de Gaulle boosted the French economy and helped road haulers, farmers and artisans who depended on diesel by reducing the taxation on this fuel for the first time.&lt;/p></description></item><item><title>Testing Java Spring Boot Microservices</title><link>https://nphumbert.github.io/blog/2017/09/17/testing-java-spring-cloud-microservices/</link><pubDate>Sun, 17 Sep 2017 16:09:24 +0200</pubDate><guid>https://nphumbert.github.io/blog/2017/09/17/testing-java-spring-cloud-microservices/</guid><description>&lt;p>Tests are an essential part of our codebase. At the very least, they minimize the risk of regression when we modify our code. There are several types of tests, and each has a specific role: unit tests, integration tests, component tests, contract tests and end-to-end tests. Therefore, it is crucial to understand the role of each type of test to leverage its potential.&lt;/p>
&lt;p>This article describes a strategy to use them to test Java Spring Boot microservices. It presents each type of test&amp;rsquo;s role, scope, and tooling.&lt;/p></description></item><item><title>How to Write Robust Component Tests</title><link>https://nphumbert.github.io/blog/2017/09/16/how-to-write-robust-component-tests/</link><pubDate>Sat, 16 Sep 2017 13:37:12 +0200</pubDate><guid>https://nphumbert.github.io/blog/2017/09/16/how-to-write-robust-component-tests/</guid><description>&lt;p>Component tests allow testing complete use cases from end to end. However, they are often expensive, especially in terms of setup and execution time. Thus, thought needs to be given to defining their scope. Nevertheless, they are required to check and document the overall behaviour of the application or the microservice.&lt;/p>
&lt;p>I have noticed that, in the context of microservices, these tests are cost-effective. Indeed, they can be easy to set up as it is often possible to use the already existing external API of the microservice without needing additional elements (like a fake server, for instance). Moreover, the scope of a microservice is generally limited and can be tested exhaustively in isolation.&lt;/p>
&lt;p>This article aims to show how to make these tests robust. The main idea is to make them independent of the implementation.&lt;/p></description></item><item><title>Setup a Circuit Breaker with Hystrix, Feign Client and Spring Boot</title><link>https://nphumbert.github.io/blog/2017/07/23/setup-a-circuit-breaker-with-hystrix/</link><pubDate>Sun, 23 Jul 2017 13:33:38 +0200</pubDate><guid>https://nphumbert.github.io/blog/2017/07/23/setup-a-circuit-breaker-with-hystrix/</guid><description>&lt;p>In a microservices architecture, several things could go wrong. For example, a middleware, the network or the service you want to contact could be down. In this world of uncertainty, you have to anticipate problems to avoid breaking the entire chain and throwing an error to the end-user when you could offer a partially degraded service instead.&lt;/p>
&lt;p>This article aims to show how to implement the circuit breaker pattern using Hystrix, Feign Client and Spring Boot.&lt;/p></description></item><item><title>Refactoring Conditional Structures with Map</title><link>https://nphumbert.github.io/blog/2017/07/20/refactoring-conditional-with-map/</link><pubDate>Thu, 20 Jul 2017 15:32:15 +0100</pubDate><guid>https://nphumbert.github.io/blog/2017/07/20/refactoring-conditional-with-map/</guid><description>&lt;p>I often encounter pieces of code that look like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Day&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">start&lt;/span>(Weather weather) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">switch&lt;/span>(weather) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> RAINY:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> takeAnUmbrella();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> SUNNY:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> takeAHat();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> STORMY:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> stayHome();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">default&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> doNothing();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here, a specific action must be taken depending on the weather. This kind of code is pretty hard to test and maintain. This short article aims to refactor it using a &lt;code>Map&lt;/code>.&lt;/p></description></item><item><title>Go Back in Time with Git</title><link>https://nphumbert.github.io/blog/2017/04/19/go-back-in-time-with-git/</link><pubDate>Wed, 19 Apr 2017 20:22:15 +0100</pubDate><guid>https://nphumbert.github.io/blog/2017/04/19/go-back-in-time-with-git/</guid><description>&lt;p>Recently, I conducted a workshop about how to go back in time with Git alongside &lt;a href="https://twitter.com/rnowif">Renaud&lt;/a>. Here are the main points that we raised during this session.&lt;/p></description></item><item><title>Quand faire un audit de code ?</title><link>https://nphumbert.github.io/blog/2017/03/20/quand-faire-un-audit-de-code/</link><pubDate>Mon, 20 Mar 2017 07:52:15 +0100</pubDate><guid>https://nphumbert.github.io/blog/2017/03/20/quand-faire-un-audit-de-code/</guid><description>&lt;p>Dans notre activité, nous sommes amenés à faire régulièrement des audits de code. Planifié ou forcé, un audit a pour but de déterminer la qualité logicielle d&amp;rsquo;une base de code et de faire des préconisations pour améliorer sa santé. L&amp;rsquo;objectif de cet article est de faire un retour d&amp;rsquo;expérience sur les différentes circonstances qui mènent à la réalisation d&amp;rsquo;un tel audit.&lt;/p></description></item><item><title>Gérer les dépendances circulaires</title><link>https://nphumbert.github.io/blog/2016/12/17/gerer-les-dependances-circulaires/</link><pubDate>Sat, 17 Dec 2016 18:31:18 +0100</pubDate><guid>https://nphumbert.github.io/blog/2016/12/17/gerer-les-dependances-circulaires/</guid><description>&lt;p>Durant mon travail, j&amp;rsquo;ai rencontré des dépendances circulaires dans une application sur laquelle je suis intervenue. Dans sa plus simple forme, il s&amp;rsquo;agit de deux classes qui dépendent l&amp;rsquo;une de l&amp;rsquo;autre.
Ceci est, selon moi, un problème pour plusieurs raisons. L&amp;rsquo;objectif de cet article est de montrer ce qu&amp;rsquo;est une dépendance circulaire, en quoi cela peut poser problème, et comment les éliminer.&lt;/p></description></item><item><title>Ecrire des tests avec Spring Boot 1.4</title><link>https://nphumbert.github.io/blog/2016/08/08/ecrire-des-tests-avec-spring-boot-1-dot-4/</link><pubDate>Mon, 08 Aug 2016 07:11:29 +0200</pubDate><guid>https://nphumbert.github.io/blog/2016/08/08/ecrire-des-tests-avec-spring-boot-1-dot-4/</guid><description>&lt;p>La version 1.4 de Spring Boot est sortie le 28 juillet 2016. Elle contient notamment des évolutions importantes au niveau de l&amp;rsquo;écriture des tests.&lt;br>
L&amp;rsquo;objectif de cet article est de voir comment migrer les tests d&amp;rsquo;un &lt;em>controller&lt;/em> Spring MVC en utilisant les nouvelles fonctionnalités apportées par cette version.&lt;/p></description></item><item><title>Refactoring d'une application N-Tiers en utilisant le CQRS</title><link>https://nphumbert.github.io/blog/2016/06/26/refactoring-architecture-n-tiers-cqrs/</link><pubDate>Sun, 26 Jun 2016 18:14:40 +0200</pubDate><guid>https://nphumbert.github.io/blog/2016/06/26/refactoring-architecture-n-tiers-cqrs/</guid><description>&lt;p>CQRS, ou &lt;em>Command Query Responsibility Segregation&lt;/em>, est une architecture où la partie &lt;em>Command&lt;/em> (écriture) et la partie &lt;em>Query&lt;/em> (lecture) du système sont séparées.&lt;/p>
&lt;p>J&amp;rsquo;ai eu la chance d&amp;rsquo;assister récemment à une présentation de &lt;a href="https://twitter.com/tjaskula">Tomasz Jaskula&lt;/a> nommée &lt;a href="https://www.youtube.com/watch?v=5Sx_xO-eCE8">Recettes CQRS, pour bien cuisiner son architecture&lt;/a>. Je l&amp;rsquo;ai beaucoup appréciée, notamment car on voit les différentes étapes pour arriver à une architecture CQRS / Event Sourcing / DDD à partir d&amp;rsquo;une architecture N-Tiers &amp;ldquo;classique&amp;rdquo;.&lt;/p>
&lt;p>L&amp;rsquo;objectif de cet article est de présenter ma compréhension et mon avis sur le CQRS en particulier.&lt;/p></description></item><item><title>ATDD et TDD double boucle</title><link>https://nphumbert.github.io/blog/2016/05/22/atdd-et-tdd-double-boucle/</link><pubDate>Sun, 22 May 2016 22:27:01 +0200</pubDate><guid>https://nphumbert.github.io/blog/2016/05/22/atdd-et-tdd-double-boucle/</guid><description>&lt;p>L&amp;rsquo;&lt;em>Acceptance Test Driven Development&lt;/em> est une pratique qui consiste à écrire un test d&amp;rsquo;acceptation dès la définition de la fonctionnalité à implémenter. Ce test permet ensuite de valider que l&amp;rsquo;implémentation de la fonctionnalité est terminée. En général, plusieurs composants unitaires sont nécessaires pour implémenter une fonctionnalité. Ces composants peuvent être développés en TDD dans une deuxième boucle de &lt;em>feedback&lt;/em>.&lt;/p>
&lt;p>L&amp;rsquo;objectif de cet article est de présenter l&amp;rsquo;ATDD et comment le mettre en pratique grâce à du TDD double boucle.&lt;/p></description></item><item><title>Découverte de Kotlin par la pratique</title><link>https://nphumbert.github.io/blog/2016/05/08/decouverte-de-kotlin-par-la-pratique/</link><pubDate>Sun, 08 May 2016 14:58:45 +0200</pubDate><guid>https://nphumbert.github.io/blog/2016/05/08/decouverte-de-kotlin-par-la-pratique/</guid><description>&lt;p>Kotlin est un langage de programmation créé par JetBrains. Il est exécuté sur la JVM et est 100% interopérable avec Java 1.6+.
J&amp;rsquo;ai découvert récemment ce langage et j&amp;rsquo;ai réalisé un ensemble de katas pour le pratiquer.
Le code source de ces katas est disponible sur GitHub :&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/nphumbert/kata-prime-factors">Prime factors&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/nphumbert/kata-string-calculator">String calculator&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/nphumbert/kata-game-of-life">Game of life&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/nphumbert/kata-mars-rover">Mars rover&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Dans cet article, je vais présenter des particularités de Kotlin que j&amp;rsquo;ai pu rencontrer.&lt;/p></description></item><item><title>Polymorphisme avec le kata parrot refactoring</title><link>https://nphumbert.github.io/blog/2016/04/20/polymorphisme-avec-le-kata-parrot-refactoring/</link><pubDate>Wed, 20 Apr 2016 16:26:03 +0200</pubDate><guid>https://nphumbert.github.io/blog/2016/04/20/polymorphisme-avec-le-kata-parrot-refactoring/</guid><description>&lt;p>Ce kata est tiré d&amp;rsquo;un exemple du livre &amp;ldquo;Refactoring, Improving the Design of Existing Code&amp;rdquo; de Martin Fowler, et a été créé par Emilie Bache.
L&amp;rsquo;exemple contient des signes de mauvais design et permet notamment de pratiquer le polymorphisme.&lt;br>
Dans cet article, une solution à ce kata sera développée. Le projet qui a servi de support se trouve sur &lt;a href="https://github.com/nphumbert/kata-parrot-refactoring">GitHub&lt;/a> avec la solution respective.&lt;/p></description></item><item><title>Once upon a time TDD... and me</title><link>https://nphumbert.github.io/blog/2016/04/13/once-upon-a-time-tdd-and-me/</link><pubDate>Wed, 13 Apr 2016 23:56:11 +0200</pubDate><guid>https://nphumbert.github.io/blog/2016/04/13/once-upon-a-time-tdd-and-me/</guid><description>&lt;p>Once upon a time, a young woman had plenty of projects and passions and was a bit hyperactive. She doesn&amp;rsquo;t really enjoy talking about her life and asks herself, very seriously, how she will write this post.&lt;/p>
&lt;p>Among her early age dreams were learning many things about science and software engineering. She started with biosciences (by the way, they are fascinating, nothing is more complex and well crafted than the human body) and then she decided to continue with software engineering. However, the software engineering program she completed only lasted one year (6 months of classes and 6 months of internship). Of course, this was only a door to access the world that she wanted to discover so much.&lt;/p></description></item><item><title>Refactoring Is Like Sleeping</title><link>https://nphumbert.github.io/blog/2016/03/10/refactoring-is-like-sleeping/</link><pubDate>Thu, 10 Mar 2016 15:12:42 +0100</pubDate><guid>https://nphumbert.github.io/blog/2016/03/10/refactoring-is-like-sleeping/</guid><description>&lt;p>Bob is a developer. He has been asked to add a brand new feature to the application. So, he would like to take this opportunity to refactor the code a little bit since it doesn&amp;rsquo;t respect the good practices that he learnt from the last Software Craftsmanship meetup. However, Bob was told that he couldn&amp;rsquo;t do it because there was not enough time to do anything other than producing features. So, Bob thought, &amp;ldquo;there is never enough time anyways&amp;rdquo;&amp;hellip;&lt;/p>
&lt;p>Sounds familiar? Indeed, refactoring is often seen as an activity without any value. Other things in life can also seem worthless. There is one that takes almost a third of our lives during which we do nothing literally: &lt;em>sleeping&lt;/em>!&lt;/p></description></item><item><title>Que faire lorsqu'une méthode privée veut être testée ?</title><link>https://nphumbert.github.io/blog/2016/02/21/que-faire-lorsqu-une-methode-privee-veut-etre-testee/</link><pubDate>Sun, 21 Feb 2016 11:09:38 +0100</pubDate><guid>https://nphumbert.github.io/blog/2016/02/21/que-faire-lorsqu-une-methode-privee-veut-etre-testee/</guid><description>&lt;p>Les tests automatisés servent à vérifier le bon comportement d&amp;rsquo;un objet (ou d&amp;rsquo;un ensemble d&amp;rsquo;objets), indépendamment de la manière dont ce comportement est implémenté. Le comportement d&amp;rsquo;un objet est décrit par son API publique (constructeurs, constantes et méthodes publiques). Les tests ne devraient donc utiliser que cette API.&lt;/p>
&lt;p>Les méthodes privées (et &lt;em>protected&lt;/em>) ne faisant pas partie de l&amp;rsquo;API publique d&amp;rsquo;un objet, elles ne devraient pas être appelées directement par le code de test.&lt;/p>
&lt;p>Cet article a pour objectif de montrer comment réagir lorsqu&amp;rsquo;il paraît nécessaire de tester une méthode privée.&lt;/p></description></item><item><title>Pourquoi ne pas utiliser l'héritage pour éviter la duplication de code ?</title><link>https://nphumbert.github.io/blog/2016/01/24/heritage-duplication-code/</link><pubDate>Sun, 24 Jan 2016 11:38:41 +0100</pubDate><guid>https://nphumbert.github.io/blog/2016/01/24/heritage-duplication-code/</guid><description>&lt;p>L&amp;rsquo;héritage est une composante très importante des langages orientés objet tels que Java. Cependant, il doit être utilisé à bon escient afin de respecter les bonnes pratiques de programmation.&lt;/p>
&lt;p>Il m&amp;rsquo;est arrivé de rencontrer des cas où l&amp;rsquo;héritage était utilisé afin de ne pas dupliquer du code. Le but de cet article est d&amp;rsquo;illustrer une telle utilisation, d&amp;rsquo;analyser ses inconvénients et de montrer une manière possible de la corriger.&lt;/p></description></item><item><title>Testing Spring MVC Controllers</title><link>https://nphumbert.github.io/blog/2015/10/31/testing-spring-mvc-controllers/</link><pubDate>Sat, 31 Oct 2015 12:54:08 +0100</pubDate><guid>https://nphumbert.github.io/blog/2015/10/31/testing-spring-mvc-controllers/</guid><description>&lt;p>Since Spring 3.2 (January 2013), it has been possible to test Spring MVC controllers without an external framework.
This article aims to show how to test Spring MVC controllers using only Spring testing capabilities.&lt;/p></description></item><item><title>Exposer des ressources statiques avec Spring MVC</title><link>https://nphumbert.github.io/blog/2015/09/18/exposer-des-ressources-statiques-avec-spring-mvc/</link><pubDate>Fri, 18 Sep 2015 12:59:06 +0100</pubDate><guid>https://nphumbert.github.io/blog/2015/09/18/exposer-des-ressources-statiques-avec-spring-mvc/</guid><description>&lt;p>Il est souvent nécessaire d&amp;rsquo;exposer des ressources statiques telles que des images, des fichiers pdf, des vidéos, etc. dans une application web.
Ces fichiers sont stockés sur le serveur et ne sont donc pas accessibles à l&amp;rsquo;utilisateur via une URL.&lt;/p>
&lt;p>L&amp;rsquo;objectif de cet article est d&amp;rsquo;exposer des fichiers stockés sur le serveur via une URL dans une application Spring MVC.&lt;/p></description></item><item><title>Transférer des paramètres à travers un redirect avec Spring MVC</title><link>https://nphumbert.github.io/blog/2015/07/25/transferer-des-parametres-a-travers-un-redirect-avec-spring-mvc/</link><pubDate>Sat, 25 Jul 2015 12:06:04 +0200</pubDate><guid>https://nphumbert.github.io/blog/2015/07/25/transferer-des-parametres-a-travers-un-redirect-avec-spring-mvc/</guid><description>&lt;p>Dans une application web, il est courant d&amp;rsquo;effectuer une redirection après la soumission d&amp;rsquo;un formulaire. Cette redirection permet notamment de rendre l&amp;rsquo;url &lt;em>bookmarkable&lt;/em> et d&amp;rsquo;empêcher l&amp;rsquo;utilisateur de resoumettre le formulaire par erreur (suite à un &lt;em>refresh&lt;/em>, par exemple).&lt;/p>
&lt;p>Il peut être intéressant de passer des paramètres à travers ce redirect. Par exemple, pour indiquer à l&amp;rsquo;utilisateur que son formulaire a bien été soumis. Pour ce faire, il est possible d&amp;rsquo;ajouter des paramètres directement dans l&amp;rsquo;url : &lt;code>redirect:/path/to/endpoint?formSubmitted=true&lt;/code>.
Cette solution n&amp;rsquo;est pas toujours adpatée pour des raisons de confidentialité, de taille d&amp;rsquo;url ou simplement d&amp;rsquo;esthétique.&lt;/p>
&lt;p>L&amp;rsquo;objectif de cet article est de démontrer comment transférer des paramètres à travers une redirection avec Spring MVC en utilisant des &lt;em>flash attributes&lt;/em>. L&amp;rsquo;exemple utilisé consistera en un formulaire qui permet d&amp;rsquo;envoyer un nom. Ce nom s&amp;rsquo;affichera ensuite une fois le formulaire soumis.&lt;/p></description></item><item><title>Spring Security et Spring Boot</title><link>https://nphumbert.github.io/blog/2015/06/21/spring-security-et-spring-boot/</link><pubDate>Sun, 21 Jun 2015 11:51:37 +0200</pubDate><guid>https://nphumbert.github.io/blog/2015/06/21/spring-security-et-spring-boot/</guid><description>&lt;p>Depuis Spring 3.1, il est possible de configurer Spring en Java.
La configuration Java de Spring Security est supportée depuis sa version 3.2 (&lt;a href="http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#jc">source&lt;/a>).&lt;/p>
&lt;p>L&amp;rsquo;objectif de cet article est de montrer comment configurer Spring Security en Java config, dans une application Spring Boot, avec une base de données qui contient les utilisateurs et leur mot de passe hashé. De plus, une authentification HTTP basic sera mise en place.&lt;/p></description></item><item><title>Injections de dépendances avec Spring</title><link>https://nphumbert.github.io/blog/2015/06/14/injections-de-dependances-avec-spring/</link><pubDate>Sun, 14 Jun 2015 08:35:20 +0200</pubDate><guid>https://nphumbert.github.io/blog/2015/06/14/injections-de-dependances-avec-spring/</guid><description>&lt;p>Il existe plusieurs méthodes pour injecter une dépendance dans un objet Java :&lt;/p>
&lt;ul>
&lt;li>Injection sur un setter&lt;/li>
&lt;li>Injection sur le constructeur&lt;/li>
&lt;li>Injection directe sur la déclaration de l&amp;rsquo;attribut&lt;/li>
&lt;/ul>
&lt;p>Cet article a pour objectif de définir ces différentes méthodes, de décrire leurs avantages et inconvénients et indiquer leurs cas d&amp;rsquo;utilisation.&lt;/p></description></item></channel></rss>